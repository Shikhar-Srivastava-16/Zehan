use std::vec;
use std::fs::File;
use std::io::prelude;
use std::convert::*;
// use overrider::*;

pub fn help() {
    // let file1 = File::open("./tensors.helptxt");
    // let mut helptxt;
    // file1.read_to_string(&mut helptxt);
    // println!()

}

pub struct Tensor {
    dim: Vec<i128>,
    // in 
    content: Vec<i128>
}    

pub struct Flat {
    len: u128,
    content: Vec<u128>
}

impl vlat {

    pub fn zeros(size: usize) -> Flat {

        let vec_flat: Vec<u128> = vec![0; size];
        let len: u128 = u128::try_from(size).unwrap();

        let ret_flat = Flat {
            len:len,
            content:vec_flat
        };

        return ret_flat;
    }

    pub fn show() {

    }

    pub fn sum(a: Flat, b: Flat) {

    }

    // pub fn _sum(a: Flat, b: u128) {

    // }
 
    pub fn difference(a: Flat ,b: Flat) {

    }


}


impl Tensor {
    
    pub fn zeros(dim: Vec<i128>, r#type: String) -> Tensor {

        let mut count: i128 = 0;
        let num: i128 = dim.iter()
                           .product();

        let mut content: Vec<i128> = Vec::new();

        loop {
            if count == num {
                break;
            } else {
                count += 1;
                content.push(0);
            }
        }
        
        let ten = Tensor{
            dim: dim,
            content: content
        };

        ten
    }

    pub fn squeeze() {

    }

    pub fn unsqueeze() {

    }

    pub fn print() {

    }

    pub fn char_at(index: i128) {
        
    }

}

